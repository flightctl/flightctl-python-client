# coding: utf-8

"""
    Flight Control API

    [Flight Control](https://github.com/flightctl/flightctl) is a service for declarative management of fleets of edge devices and their workloads. 

    The version of the OpenAPI document: v1alpha1
    Contact: team@flightctl.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from flightctl.models.condition import Condition
from flightctl.models.device_application_status import DeviceApplicationStatus
from flightctl.models.device_applications_summary_status import DeviceApplicationsSummaryStatus
from flightctl.models.device_config_status import DeviceConfigStatus
from flightctl.models.device_integrity_status import DeviceIntegrityStatus
from flightctl.models.device_lifecycle_status import DeviceLifecycleStatus
from flightctl.models.device_os_status import DeviceOSStatus
from flightctl.models.device_resource_status import DeviceResourceStatus
from flightctl.models.device_summary_status import DeviceSummaryStatus
from flightctl.models.device_system_info import DeviceSystemInfo
from flightctl.models.device_updated_status import DeviceUpdatedStatus
from typing import Optional, Set
from typing_extensions import Self

class DeviceStatus(BaseModel):
    """
    DeviceStatus represents information about the status of a device. Status may trail the actual state of a device.
    """ # noqa: E501
    conditions: List[Condition] = Field(description="Conditions represent the observations of a the current state of a device.")
    system_info: DeviceSystemInfo = Field(alias="systemInfo")
    applications: List[DeviceApplicationStatus] = Field(description="List of device application status.")
    applications_summary: DeviceApplicationsSummaryStatus = Field(alias="applicationsSummary")
    resources: DeviceResourceStatus
    integrity: DeviceIntegrityStatus
    config: DeviceConfigStatus
    os: DeviceOSStatus
    updated: DeviceUpdatedStatus
    summary: DeviceSummaryStatus
    last_seen: datetime = Field(description="The last time the device was seen by the service.", alias="lastSeen")
    lifecycle: DeviceLifecycleStatus
    __properties: ClassVar[List[str]] = ["conditions", "systemInfo", "applications", "applicationsSummary", "resources", "integrity", "config", "os", "updated", "summary", "lastSeen", "lifecycle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict['conditions'] = _items
        # override the default output from pydantic by calling `to_dict()` of system_info
        if self.system_info:
            _dict['systemInfo'] = self.system_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item_applications in self.applications:
                if _item_applications:
                    _items.append(_item_applications.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of applications_summary
        if self.applications_summary:
            _dict['applicationsSummary'] = self.applications_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of integrity
        if self.integrity:
            _dict['integrity'] = self.integrity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict['os'] = self.os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated
        if self.updated:
            _dict['updated'] = self.updated.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lifecycle
        if self.lifecycle:
            _dict['lifecycle'] = self.lifecycle.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conditions": [Condition.from_dict(_item) for _item in obj["conditions"]] if obj.get("conditions") is not None else None,
            "systemInfo": DeviceSystemInfo.from_dict(obj["systemInfo"]) if obj.get("systemInfo") is not None else None,
            "applications": [DeviceApplicationStatus.from_dict(_item) for _item in obj["applications"]] if obj.get("applications") is not None else None,
            "applicationsSummary": DeviceApplicationsSummaryStatus.from_dict(obj["applicationsSummary"]) if obj.get("applicationsSummary") is not None else None,
            "resources": DeviceResourceStatus.from_dict(obj["resources"]) if obj.get("resources") is not None else None,
            "integrity": DeviceIntegrityStatus.from_dict(obj["integrity"]) if obj.get("integrity") is not None else None,
            "config": DeviceConfigStatus.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "os": DeviceOSStatus.from_dict(obj["os"]) if obj.get("os") is not None else None,
            "updated": DeviceUpdatedStatus.from_dict(obj["updated"]) if obj.get("updated") is not None else None,
            "summary": DeviceSummaryStatus.from_dict(obj["summary"]) if obj.get("summary") is not None else None,
            "lastSeen": obj.get("lastSeen"),
            "lifecycle": DeviceLifecycleStatus.from_dict(obj["lifecycle"]) if obj.get("lifecycle") is not None else None
        })
        return _obj


